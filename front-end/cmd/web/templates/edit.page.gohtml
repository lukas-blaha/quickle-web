{{template "base" .}}

{{define "content" }}
		<style>
			* {
				color: white;
			}
			html {
				background-color: #090A2D;
				width: 100%;
				height: 100%;
			}
			body {
				background-color: #090A2D;
				width: 100%;
				height: 100%;
			}
			.custom-row {
				margin: 1em;
				background-color: #2D3856;
			}
			.custom-input {
				width: 100%;
				background-color: #2D3856;
				border: 0;
				outline: 1px solid grey;
			}
			.custom-btn {
				margin-top: 2em;
				margin-bottom: 1em;
			}
			.hidden {
			  display: none;
			}
		</style>
		<div class="container">
      <div class="row row-cols-4">
        <div class="col-6">
					<h1 style="margin-top: 2rem;">{{(index . 0).Deck}}</h1>
        </div>
        <div class="col">
					<a id="quitBtn" class="btn btn btn-outline-secondary rounded custom-btn float-end" href="javascript:void(0);" style="margin-top: 2.7rem;">Normal Mode</a>
        </div>
        <div class="col-sm-2">
					<a id="delDeckBtn" class="btn btn-lg btn-dark rounded custom-btn float-end" href="javascript:void(0);">Delete study</a>
        </div>
        <div class="col-sm-1">
					<a id="backBtn" class="btn btn-lg btn-outline-warning rounded custom-btn" href="javascript:void(0);">Back</a>
        </div>
      </div>
			<hr>
			{{range .}}
			<div class="row row-cols-4 rounded custom-row" style="outline: 1px solid silver; padding: 1em;">
				<div class="col-5">
					<div class="mt-1 text-center rounded" style="padding: 1em;">
						<input id="term{{.ID}}Text" class="form-control-lg custom-input" type="text" value="{{.Term}}">
					</div>
				</div>
				<div class="col-5">
					<div class="mt-1 text-center rounded" style="padding: 1em;">
						<input id="def{{.ID}}Text" class="form-control-lg custom-input" type="text" value="{{.Definition}}">
					</div>
				</div>
				<div class="col-sm-1 my-auto">
					<a id="update{{.ID}}Btn" class="btn btn-lg btn-outline-warning float-end" href="javascript:void(0);">‚úîÔ∏è</a>
				</div>
				<div class="col-sm-1 my-auto">
					<a id="del{{.ID}}Btn" class="btn btn-lg btn-outline-danger" href="javascript:void(0);">üóëÔ∏è</a>
				</div>
			</div>
			{{end}}
    </div>
{{end}}

{{define "js"}}
		<script>
			const editBtn = document.getElementById("writeBtn");
			const delDeckBtn = document.getElementById("delDeckBtn");
			const backBtn = document.getElementById("backBtn");
			const termText = document.getElementById("termText");
			const defText = document.getElementById("defText");

			{{range .}}
			const update{{.ID}}Btn = document.getElementById("update{{.ID}}Btn");
			const del{{.ID}}Btn = document.getElementById("del{{.ID}}Btn");
			{{end}}

			const apiURL = 'https://quickle-api.fikos.cz';
			const deck = '{{(index . 0).Deck}}';

			const sleep = function(ms) {
				return new Promise(resolve => setTimeout(resolve, ms));
			}

			const changeBtnBack = async function(n) {
				await sleep(2000);
				addNewBtn.textContent = n;
			}

			const addNewItem = function() {
				if (termText.value === "" || defText.value === "") {
					addNewBtn.textContent = "Empty!";
					changeBtnBack('Add');
				} else {
					const newItemUrl = `${apiURL}/deck/${deck}`
					const data = {
						"term": termText.value,
						"definition": defText.value
					};
					fetch(newItemUrl, {
						method: "POST",
						body: JSON.stringify(data),
						headers: {
							"Content-Type": "application/json"
						}
					});
					termText.value = "";
					defText.value = "";
				}
			}

			quitBtn.addEventListener('click', function() {
				window.location.pathname = `/${deck}`;
			});

			delDeckBtn.addEventListener('click', async function() {
				const newItemUrl = `${apiURL}/deck/${deck}`;
				await fetch(newItemUrl, {
					method: "DELETE",
					headers: {
						"Content-Type": "application/json"
					}
				});
				window.location.pathname = `/`;
			});

			backBtn.addEventListener('click', function() {
				window.location.pathname = `/`;
			});

			{{range .}}
			update{{.ID}}Btn.addEventListener('click', async function() {
				const newItemUrl = `${apiURL}/deck/${deck}/{{.ID}}`;
				const newTerm = term{{.ID}}Text.value
				const newDef = def{{.ID}}Text.value

				const data = {
					"term": newTerm,
					"definition": newDef
				};

				if (newTerm === '{{.Term}}' && newDef === '{{.Definition}}') {
					update{{.ID}}Btn.classList.remove('btn-outline-secondary');
					update{{.ID}}Btn.classList.add('btn-danger');
					await sleep(2000)
					update{{.ID}}Btn.classList.remove('btn-danger');
					update{{.ID}}Btn.classList.add('btn-outline-secondary');
				} else {
					await fetch(newItemUrl, {
						method: "PATCH",
						body: JSON.stringify(data),
						headers: {
							"Content-Type": "application/json"
					}
					});

					update{{.ID}}Btn.classList.remove('btn-outline-secondary');
					update{{.ID}}Btn.classList.add('btn-success');
					await sleep(2000)
					update{{.ID}}Btn.classList.remove('btn-success');
					update{{.ID}}Btn.classList.add('btn-outline-secondary');

					location.reload();
					return false;
				}
			});

			del{{.ID}}Btn.addEventListener('click', async function() {
				const newItemUrl = `${apiURL}/deck/${deck}/{{.ID}}`;
				await fetch(newItemUrl, {
					method: "DELETE",
					headers: {
						"Content-Type": "application/json"
					}
				});
				location.reload();
				return false;
			});
			{{end}}
    </script>
{{end}}
