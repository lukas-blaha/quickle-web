{{template "base" .}}

{{define "content" }}
		<style>
			.centered{
					position: relative;
				  top:50%;
				  transform: translateY(-50%);
			}
			.card {
					margin-left: 25%;
					margin-right: 25%;
					width: 50%;
			}
			.custom-btn {
				margin: 2em;
			}
		</style>
    <div class="container">
        <div class="row row-cols-2">
          <div class="col">
              <h1 class="mt-5">Cards</h1>
          </div>
					<div class="col">
						<a id="backBtn" class="btn btn-lg btn-outline-secondary rounded custom-btn float-end" href="javascript:void(0);" style="margin-left: 1em;">Back</a>
					</div>
        </div>
        <hr>
        <div class="row row-cols-1">
					<div class="col">
						<div id="card" class="mt-1 text-center fs-1 rounded my-auto card" style="outline: 1px solid silver; padding: 2em;">
              <pre id="card-text"><span class="centered"></span></pre>
						</div>
					</div>
				</div>
        <div class="row">
            <div class="col">
								<hr>
								<a id="prevBtn" class="btn btn-outline-secondary float-end" href="javascript:void(0);">Prev</a>
            </div>
            <div class="col">
								<hr>
									<a id="nextBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Next</a>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
		<script>
			const nextBtn = document.getElementById("nextBtn");
			const prevBtn = document.getElementById("prevBtn");
			const backBtn = document.getElementById("backBtn");
			const card = document.getElementById('card');
			const cardText = document.getElementById('card-text');

			const baseURL = 'http://front-end:8080'
			const baseApiURL = 'http://data-service:8888'
			const deck = '{{.}}';

			let idParam = 0;
			let firstId = 0;
			let lastId = 0;
			let start = true;

			const showObject = async function(deck, id) {
				try {
					const res = await fetch(`${baseApiURL}/deck/${deck}?id=${id}`);
					const data = await res.json();

					if (!res.ok) throw new Error(`${data.message}`)

					let term = data.term;
					let def = data.definition;

					if (cardText.textContent === term) {
						cardText.textContent = def;
					} else {
						cardText.textContent = term;
					}

				} catch (err) {
					alert(err);
				}
			}

			const getRange = async function(deck) {
				try {
					const deckRange = await fetch(`${baseApiURL}/deck/${deck}/l`);
					const rng = await deckRange.json();

					if (!deckRange.ok) throw new Error(`${rng.message}`);

					firstId = rng.first;
					lastId = rng.last;
					idParam = firstId;

					if (start) {
						showObject(deck, idParam);
						start = false;
					}

				} catch (err) {
					alert(err)
				}
			}

			const iterate = function(a) {
				if (a === 'next') {
					if (idParam < lastId) {
						idParam++;
						showObject(deck, idParam);
					}
				} else if (a === 'prev') {
					if (idParam > firstId) {
						idParam--;
						showObject(deck, idParam);
					}
				}
			}

			getRange(deck)

			card.addEventListener('click', function() {
				showObject(deck, idParam)
			});

			nextBtn.addEventListener('click', function() {
				iterate('next');
			});

			prevBtn.addEventListener('click', function() {
				iterate('prev');
			});

			backBtn.addEventListener('click', function() {
				window.location = `${baseURL}/${deck}`;
			});

			document.addEventListener('keyup', function(e) {
				if (e.key === 'ArrowLeft') {
					iterate('prev');
				}

				if (e.key === 'ArrowRight') {
					iterate('next');
				}

				if (e.key === ' ') {
						showObject(deck, idParam);
				}
			});
    </script>
{{end}}
